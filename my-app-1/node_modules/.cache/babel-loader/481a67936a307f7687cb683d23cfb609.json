{"ast":null,"code":"'use strict';\n\nvar axios = require('axios');\n\nvar buildURL = require('axios/lib/helpers/buildURL');\n\nvar axiosDebug = require('debug')('axios');\n\nconst getURL = config => {\n  return buildURL(config.url, config.params, config.paramsSerializer);\n};\n\nvar options = {\n  request: function (debug, config) {\n    debug(config.method.toUpperCase() + ' ' + getURL(config));\n  },\n  response: function (debug, response) {\n    debug(response.status + ' ' + response.statusText, '(' + response.config.method.toUpperCase() + ' ' + getURL(response.config) + ')');\n  },\n  error: function (debug, error) {\n    if (error.config) {\n      debug(error.name + ': ' + error.message, '(' + error.config.method.toUpperCase() + ' ' + getURL(error.config) + ')');\n    } else {\n      debug(error.name + ': ' + error.message);\n    }\n  }\n};\n\nfunction addLogger(instance, debug) {\n  if (debug === undefined) debug = axiosDebug;\n  instance.interceptors.request.use(function (config) {\n    options.request(debug, config);\n    return config;\n  });\n  instance.interceptors.response.use(function (response) {\n    options.response(debug, response);\n    return response;\n  }, function (error) {\n    options.error(debug, error);\n    throw error;\n  });\n}\n\naddLogger(axios);\n\naxios.create = function (originalCreate) {\n  return function create() {\n    var instance = originalCreate.apply(this, arguments);\n    addLogger(instance);\n    return instance;\n  };\n}(axios.create);\n\nexports = module.exports = function (userOptions) {\n  for (var key in options) {\n    if (key in userOptions) {\n      options[key] = userOptions[key];\n    }\n  }\n};\n\nexports.addLogger = addLogger;","map":null,"metadata":{},"sourceType":"script"}